{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nfunction LoginComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email must be a valid Email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"../register\"];\n};\nexport class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required])\n    });\n  }\n  login() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    this.authService.login(this.loginForm.value).pipe(\n    // route to protected/dashboard, if login was successfull\n    tap(() => this.router.navigate(['../../protected/dashboard']))).subscribe();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 18,\n  vars: 7,\n  consts: [[3, \"routerLink\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [1, \"button\"], [\"type\", \"submit\", \"mat-button\", \"\", 3, \"disabled\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"a\", 0);\n      i0.ɵɵtext(2, \"Go to Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-card\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(8, \"mat-form-field\");\n      i0.ɵɵelement(9, \"input\", 2);\n      i0.ɵɵtemplate(10, LoginComponent_mat_error_10_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\");\n      i0.ɵɵelement(13, \"input\", 4);\n      i0.ɵɵtemplate(14, LoginComponent_mat_error_14_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"button\", 6);\n      i0.ɵɵtext(17, \"Login\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(6, _c0));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_3_0.hasError(\"email\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_4_0.hasError(\"required\")));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.MatCard, i5.MatCardContent, i5.MatCardTitle, i6.MatFormField, i6.MatError, i7.MatInput, i8.MatButton],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,GAAG,QAAQ,gBAAgB;;;;;;;;;;;;ICS1BC,iCAA6G;IAC3GA,kCAAiB;IAAAA,iBAAY;;;;;IAC/BA,iCAA0G;IACxGA,4CAA2B;IAAAA,iBAAY;;;;;IAKzCA,iCAC0G;IACxGA,qCAAoB;IAAAA,iBAAY;;;;;;ADV5C,OAAM,MAAOC,cAAc;EAOzBC,YACUC,WAAwB,EACxBC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;IAPhB,cAAS,GAAc,IAAIP,SAAS,CAAC;MACnCQ,KAAK,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACO,KAAK,CAAC,CAAC;MACrEE,QAAQ,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC;KACtD,CAAC;EAKE;EAEJE,KAAK;IACH,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE;MACzB;;IAEF,IAAI,CAACP,WAAW,CAACK,KAAK,CAAC,IAAI,CAACC,SAAS,CAACE,KAAK,CAAC,CAACC,IAAI;IAC/C;IACAb,GAAG,CAAC,MAAM,IAAI,CAACK,MAAM,CAACS,QAAQ,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAC/D,CAACC,SAAS,EAAE;EACf;;AApBWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAc;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BnB,2BAAK;MAC+BA,8BAAc;MAAAA,iBAAI;MACpDA,gCAAU;MACQA,qBAAK;MAAAA,iBAAiB;MACtCA,wCAAkB;MACcA;QAAA,OAAYoB,WAAO;MAAA,EAAC;MAEhDpB,sCAAgB;MACdA,2BAAyE;MAGzEA,6EAC+B;MAC/BA,6EACyC;MAC3CA,iBAAiB;MAEjBA,uCAAgB;MACdA,4BAAkF;MAClFA,6EAEkC;MACpCA,iBAAiB;MAEjBA,+BAAoB;MAE6CA,sBAAK;MAAAA,iBAAS;;;;;;MAzBlFA,eAA8B;MAA9BA,uDAA8B;MAIvBA,eAAuB;MAAvBA,yCAAuB;MAMbA,eAA+F;MAA/FA,0LAA+F;MAE/FA,eAA4F;MAA5FA,uLAA4F;MAOrGA,eAAqG;MAArGA,gMAAqG;MAMvEA,eAA6B;MAA7BA,+CAA6B","names":["FormControl","FormGroup","Validators","tap","i0","LoginComponent","constructor","authService","router","email","required","password","login","loginForm","valid","value","pipe","navigate","subscribe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\foodie\\foodmine-course\\frontend\\src\\app\\public\\login\\login.component.ts","C:\\Users\\User\\Desktop\\foodie\\foodmine-course\\frontend\\src\\app\\public\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n\n  loginForm: FormGroup = new FormGroup({\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    password: new FormControl(null, [Validators.required]),\n  });\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  login() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    this.authService.login(this.loginForm.value).pipe(\n      // route to protected/dashboard, if login was successfull\n      tap(() => this.router.navigate(['../../protected/dashboard']))\n    ).subscribe();\n  }\n\n}\n","<div>\n  <a [routerLink]=\"['../register']\">Go to Register</a>\n  <mat-card>\n    <mat-card-title>Login</mat-card-title>\n    <mat-card-content>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n\n        <mat-form-field>\n          <input type=\"email\" matInput placeholder=\"Email\" formControlName=\"email\">\n          <!-- Here we can display error messages/hints for the user, if one of the Validators adds an error to the email\n           with the .touched check we only display the hints if the input was touched by the users -->\n          <mat-error *ngIf=\"this.loginForm.get('email')?.touched && this.loginForm.get('email')?.hasError('required')\">\n            Email is required</mat-error>\n          <mat-error *ngIf=\"this.loginForm.get('email')?.touched && this.loginForm.get('email')?.hasError('email')\">\n            Email must be a valid Email</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\">\n          <mat-error\n            *ngIf=\"this.loginForm.get('password')?.touched && this.loginForm.get('password')?.hasError('required')\">\n            Password is required</mat-error>\n        </mat-form-field>\n\n        <div class=\"button\">\n          <!-- Button is disabled(not clickable), if our LoginForm contains Validation Errors -->\n          <button type=\"submit\" mat-button [disabled]=\"!loginForm.valid\">Login</button>\n        </div>\n\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}