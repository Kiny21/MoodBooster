{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport class AuthGuard {\n  constructor(router, jwtService) {\n    this.router = router;\n    this.jwtService = jwtService;\n  }\n  canActivate() {\n    // isTokenExpired() will return true, if either:\n    // - token is expired\n    // - no token or key/value pair in localStorage\n    // - ... (since the backend should validate the token, even if there is another false token,\n    //       then he can access the frontend route, but will not get any data from the backend)\n    // --> then redirect to the base route and deny the routing\n    // --> else return true and allow the routing\n    if (this.jwtService.isTokenExpired()) {\n      this.router.navigate(['']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,MAAc,EACdC,UAA4B;IAD5B,WAAM,GAAND,MAAM;IACN,eAAU,GAAVC,UAAU;EAChB;EAEJC,WAAW;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACD,UAAU,CAACE,cAAc,EAAE,EAAE;MACpC,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1B,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;AArBWN,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAO,SAATP,SAAS;EAAAQ,YAFR;AAAM","names":["AuthGuard","constructor","router","jwtService","canActivate","isTokenExpired","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\foodie\\foodmine-course\\frontend\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private router: Router,\n    private jwtService: JwtHelperService\n  ) { }\n\n  canActivate(): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    // isTokenExpired() will return true, if either:\n    // - token is expired\n    // - no token or key/value pair in localStorage\n    // - ... (since the backend should validate the token, even if there is another false token,\n    //       then he can access the frontend route, but will not get any data from the backend)\n    // --> then redirect to the base route and deny the routing\n    // --> else return true and allow the routing\n    if (this.jwtService.isTokenExpired()) {\n      this.router.navigate(['']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}