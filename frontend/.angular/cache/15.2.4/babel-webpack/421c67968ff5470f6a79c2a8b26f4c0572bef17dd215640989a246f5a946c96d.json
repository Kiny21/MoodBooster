{"ast":null,"code":"import { LOCALSTORAGE_TOKEN_KEY } from '../app.module';\nimport { of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@auth0/angular-jwt\";\nexport const fakeLoginResponse = {\n  // fakeAccessToken.....should all come from real backend\n  accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n  refreshToken: {\n    id: 1,\n    userId: 2,\n    token: 'fakeRefreshToken...should al come from real backend',\n    refreshCount: 2,\n    expiryDate: new Date()\n  },\n  tokenType: 'JWT'\n};\nexport const fakeRegisterResponse = {\n  status: 200,\n  message: 'Registration sucessfull.'\n};\nexport class AuthService {\n  constructor(http, snackbar, jwtService) {\n    this.http = http;\n    this.snackbar = snackbar;\n    this.jwtService = jwtService;\n  }\n  /*\r\n   Due to the '/api' the url will be rewritten by the proxy, e.g. to http://localhost:8080/api/auth/login\r\n   this is specified in the src/proxy.conf.json\r\n   the proxy.conf.json listens for /api and changes the target. You can also change this in the proxy.conf.json\r\n       The `..of()..` can be removed if you have a real backend, at the moment, this is just a faked response\r\n  */\n  login(loginRequest) {\n    return of(fakeLoginResponse).pipe(tap(res => localStorage.setItem(LOCALSTORAGE_TOKEN_KEY, res.accessToken)), tap(() => this.snackbar.open('Login Successfull', 'Close', {\n      duration: 2000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top'\n    })));\n    // return this.http.post<LoginResponse>('/api/auth/login', loginRequest).pipe(\n    // tap((res: LoginResponse) => localStorage.setItem(LOCALSTORAGE_TOKEN_KEY, res.accessToken)),\n    // tap(() => this.snackbar.open('Login Successfull', 'Close', {\n    //  duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n    // }))\n    // );\n  }\n  /*\r\n   The `..of()..` can be removed if you have a real backend, at the moment, this is just a faked response\r\n  */\n  register(registerRequest) {\n    // TODO\n    return of(fakeRegisterResponse).pipe(tap(res => this.snackbar.open(`User created successfully`, 'Close', {\n      duration: 2000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top'\n    })));\n    // return this.http.post<RegisterResponse>('/api/auth/register', registerRequest).pipe(\n    // tap((res: RegisterResponse) => this.snackbar.open(`User created successfully`, 'Close', {\n    //  duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n    // }))\n    // )\n  }\n  /*\r\n   Get the user fromt the token payload\r\n   */\n  getLoggedInUser() {\n    const decodedToken = this.jwtService.decodeToken();\n    return decodedToken.user;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.JwtHelperService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AAGtD,SAA0BC,EAAE,EAAaC,GAAG,QAAQ,MAAM;;;;;AAK1D,OAAO,MAAMC,iBAAiB,GAAkB;EAC9C;EACAC,WAAW,EAAE,6JAA6J;EAC1KC,YAAY,EAAE;IACZC,EAAE,EAAE,CAAC;IACLC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE,qDAAqD;IAC5DC,YAAY,EAAE,CAAC;IACfC,UAAU,EAAE,IAAIC,IAAI;GACrB;EACDC,SAAS,EAAE;CACZ;AAED,OAAO,MAAMC,oBAAoB,GAAqB;EACpDC,MAAM,EAAE,GAAG;EACXC,OAAO,EAAE;CACV;AAMD,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,QAAqB,EACrBC,UAA4B;IAF5B,SAAI,GAAJF,IAAI;IACJ,aAAQ,GAARC,QAAQ;IACR,eAAU,GAAVC,UAAU;EAChB;EAEJ;;;;;;EAOAC,KAAK,CAACC,YAA0B;IAC9B,OAAOrB,EAAE,CAACE,iBAAiB,CAAC,CAACoB,IAAI,CAC/BrB,GAAG,CAAEsB,GAAkB,IAAKC,YAAY,CAACC,OAAO,CAAC1B,sBAAsB,EAAEwB,GAAG,CAACpB,WAAW,CAAC,CAAC,EAC1FF,GAAG,CAAC,MAAM,IAAI,CAACiB,QAAQ,CAACQ,IAAI,CAAC,mBAAmB,EAAE,OAAO,EAAE;MACzDC,QAAQ,EAAE,IAAI;MAAEC,kBAAkB,EAAE,OAAO;MAAEC,gBAAgB,EAAE;KAChE,CAAC,CAAC,CACJ;IACD;IACA;IACA;IACA;IACA;IACA;EACF;EAEA;;;EAGAC,QAAQ,CAACC,eAAgC;IACvC;IACA,OAAO/B,EAAE,CAACY,oBAAoB,CAAC,CAACU,IAAI,CAClCrB,GAAG,CAAEsB,GAAqB,IAAK,IAAI,CAACL,QAAQ,CAACQ,IAAI,CAAC,2BAA2B,EAAE,OAAO,EAAE;MACtFC,QAAQ,EAAE,IAAI;MAAEC,kBAAkB,EAAE,OAAO;MAAEC,gBAAgB,EAAE;KAChE,CAAC,CAAC,CACJ;IACD;IACA;IACA;IACA;IACA;EACF;EAEA;;;EAGAG,eAAe;IACb,MAAMC,YAAY,GAAG,IAAI,CAACd,UAAU,CAACe,WAAW,EAAE;IAClD,OAAOD,YAAY,CAACE,IAAI;EAC1B;;AArDWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["LOCALSTORAGE_TOKEN_KEY","of","tap","fakeLoginResponse","accessToken","refreshToken","id","userId","token","refreshCount","expiryDate","Date","tokenType","fakeRegisterResponse","status","message","AuthService","constructor","http","snackbar","jwtService","login","loginRequest","pipe","res","localStorage","setItem","open","duration","horizontalPosition","verticalPosition","register","registerRequest","getLoggedInUser","decodedToken","decodeToken","user","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\foodie\\foodmine-course\\frontend\\src\\app\\public\\auth.service.ts"],"sourcesContent":["import { LOCALSTORAGE_TOKEN_KEY } from '../app.module';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, of, switchMap, tap } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { LoginRequest,LoginResponse, RegisterRequest, RegisterResponse  } from './interfaces';\n\nexport const fakeLoginResponse: LoginResponse = {\n  // fakeAccessToken.....should all come from real backend\n  accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n  refreshToken: {\n    id: 1,\n    userId: 2,\n    token: 'fakeRefreshToken...should al come from real backend',\n    refreshCount: 2,\n    expiryDate: new Date(),\n  },\n  tokenType: 'JWT'\n}\n\nexport const fakeRegisterResponse: RegisterResponse = {\n  status: 200,\n  message: 'Registration sucessfull.'\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient,\n    private snackbar: MatSnackBar,\n    private jwtService: JwtHelperService\n  ) { }\n\n  /*\n   Due to the '/api' the url will be rewritten by the proxy, e.g. to http://localhost:8080/api/auth/login\n   this is specified in the src/proxy.conf.json\n   the proxy.conf.json listens for /api and changes the target. You can also change this in the proxy.conf.json\n\n   The `..of()..` can be removed if you have a real backend, at the moment, this is just a faked response\n  */\n  login(loginRequest: LoginRequest): Observable<LoginResponse> {\n    return of(fakeLoginResponse).pipe(\n      tap((res: LoginResponse) => localStorage.setItem(LOCALSTORAGE_TOKEN_KEY, res.accessToken)),\n      tap(() => this.snackbar.open('Login Successfull', 'Close', {\n        duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n      }))\n    );\n    // return this.http.post<LoginResponse>('/api/auth/login', loginRequest).pipe(\n    // tap((res: LoginResponse) => localStorage.setItem(LOCALSTORAGE_TOKEN_KEY, res.accessToken)),\n    // tap(() => this.snackbar.open('Login Successfull', 'Close', {\n    //  duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n    // }))\n    // );\n  }\n\n  /*\n   The `..of()..` can be removed if you have a real backend, at the moment, this is just a faked response\n  */\n  register(registerRequest: RegisterRequest): Observable<RegisterResponse> {\n    // TODO\n    return of(fakeRegisterResponse).pipe(\n      tap((res: RegisterResponse) => this.snackbar.open(`User created successfully`, 'Close', {\n        duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n      })),\n    );\n    // return this.http.post<RegisterResponse>('/api/auth/register', registerRequest).pipe(\n    // tap((res: RegisterResponse) => this.snackbar.open(`User created successfully`, 'Close', {\n    //  duration: 2000, horizontalPosition: 'right', verticalPosition: 'top'\n    // }))\n    // )\n  }\n\n  /*\n   Get the user fromt the token payload\n   */\n  getLoggedInUser() {\n    const decodedToken = this.jwtService.decodeToken();\n    return decodedToken.user;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}